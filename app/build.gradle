apply plugin: 'com.android.application'

android {
    namespace 'com.alexkmbk.androidtinytools'
    compileSdkVersion 34
    ndkVersion "26.2.11394342"
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    // включаем Xlint
    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs += ["-Xlint:deprecation"]
    }

    defaultConfig {
        applicationId "com.alexkmbk.androidtinytools"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                arguments '-DANDROID_STL=c++_static'
                cppFlags "-std=c++11 -fexceptions"
            }
        }
        ndk {
            //abiFilters 'armeabi-v7a'
            //abiFilters 'armeabi-v7a', 'arm64-v8a'
            abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
            //abiFilters 'arm64-v8a'
            //abiFilters 'armeabi'
            //abiFilters 'x86_64'
        }
        externalNativeBuild {
            cmake {
                cppFlags "-fexceptions -O1"
            }
        }
    }
    buildTypes {

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            externalNativeBuild {
                cmake {
                    arguments "-DCMAKE_BUILD_TYPE=Release"
                }
            }
            /*applicationVariants.all { variant ->
                //variant.outputs.all { output ->
                //    output.outputFileName =  new File("./../../../../../Package/", 'AndroidTinyTools.apk')
                //}
            }*/
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    packagingOptions {
        //exclude 'lib/armeabi-v7a/libAndroidTinyTools_ARM.so'
        //exclude 'lib/arm64-v8a/libAndroidTinyTools_ARM64.so'
        //exclude 'lib/x86/libAndroidTinyTools_i386.so'
        exclude "lib/**"
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude("META-INF/*.kotlin_module")
    }
}

tasks.register("incrementVersion") {
    doLast {
        def constantsFile = file("src/main/java/com/alexkmbk/androidtinytools/Constants.java")
        def content = constantsFile.text
        def versionRegex = /public static final String version = "(\d+)_(\d+)_(\d+)";/
        def matcher = content =~ versionRegex

        if (matcher.find()) {
            def major = matcher[0][1].toInteger()
            def minor = matcher[0][2].toInteger()
            def patch = matcher[0][3].toInteger() + 1

            def newVersion = "public static final String version = \"${major}_${minor}_${patch}\";"
            content = content.replaceFirst(versionRegex, newVersion)
            constantsFile.text = content
            println("Version updated to: ${major}_${minor}_${patch}")

            // Обновление файла VerInfo.txt
            def verInfoFile = file("${rootDir}/Package/VerInfo.txt")
            verInfoFile.text = "${major}.${minor}.${patch}"
            println("VerInfo.txt updated to: ${major}.${minor}.${patch}")
        } else {
            throw new GradleException("Version constant not found in Constants.java")
        }
    }
}

preBuild.dependsOn("incrementVersion")

// Запускаем bat после сборки APK
gradle.projectsEvaluated {
    tasks.named("assembleRelease") {
        doLast {
            println ">>> Копируем APK и запускаем MakePackage.bat..."
            println ">>> rootDir:${rootDir}"

            // Путь к готовому APK (Android Gradle Plugin 7.x+ кладёт сюда)
            //def apkPath = "${rootDir}/app/release/app-release.apk"

            def variant = name.replace("assemble", "").toLowerCase()
            println ">>> Копируем APK для variant: ${variant}"

            // Путь к apk
            def apkPath = "${rootDir}/app/${variant}/app-${variant}.apk"

            // Папка назначения Package (корень проекта)
            def packageDir = "${rootDir}/Package"

            // Создаём папку Package, если её ещё нет
            file(packageDir).mkdirs()

            // Копируем APK
            copy {
                from apkPath
                into packageDir
                rename { fileName ->
                    "AndroidTinyTools.apk"   // любое имя вместо app-release.apk
                }
            }
            exec {
                workingDir "${project.rootDir}/Package"
                commandLine "cmd", "/c", "MakePackage.bat"
            }
        }
    }
}

dependencies {
    //implementation 'androidx.core:core-ktx:1.6.0'
    //debugImplementation 'com.android.support:support-annotations:28.0.0'

    //implementation 'com.android.support:appcompat-v7:28.0.0'
    //testImplementation 'junit:junit:4.12'
    //androidTestImplementation 'com.android.support.test:runner:1.0.2'
    //androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //implementation "com.android.support:support-annotations:28.0.0"
    //annotationProcessor 'com.android.support:support-annotations:28.0.0'

    // Для инструментальных тестов (AndroidTest)
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")

    // Дополнительно рекомендуется добавить runner и rules
    androidTestImplementation("androidx.test:runner:1.6.2")
    androidTestImplementation("androidx.test:rules:1.6.1")

    implementation 'androidx.annotation:annotation:1.7.1'
}
